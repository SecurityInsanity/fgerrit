#!/usr/bin/env python

import os
import sys
import subprocess
import optparse
import urlparse
from fgerrit import FGerrit

class GerritCMD(object):

    def __init__(self):
        self.verbose = True

    def get_gerrit_url(self):
        cmd = ['git', 'config', '--get', 'remote.gerrit.url']
        run = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        gurl = run.stdout.readline().strip()
        if gurl:
            if gurl.endswith('.git'):
                return urlparse.urlparse(gurl[:-4])
            else:
                return urlparse.urlparse(gurl)
        else:
            try:
                gurl = os.environ['GERRIT_URL']
                if gurl.endswith('.git'):
                    return urlparse.urlparse(gurl[:-4])
                else:
                    return urlparse.urlparse(gurl)
            except KeyError:
                return None

    def main(self):
        """
        Retrieve and report cluster info from hosts running recon middleware.
        """
        usage = '''
        %prog: [-l][-r <review>][-2|1|0|p|P|a <sha1>][--verified=-1|0|+2 sha1]
            [-m message][--recheck|--abandon|--delete|--submit <sha1>]
            [--restore|--publish <sha1>][--user=gerrituser][--host=gerrithost]
            [--port=gerritport][--project <project>]

            Gerrit information defaults to gerrit remote url in git config or
            the GERRIT_URL env. The options --host, --user, --port, --project
            will override these defaults.

            Examples:
            List all pending reviews: %prog -l
            To -1 a patchset: %prog -1 7b251
            Submit a change: %prog --submit 7b251
            View review number 10101: %prog -r 10101
            View review with sha1 7b251: %prog -r 7b251'''
        args = optparse.OptionParser(usage)
        args.add_option('--list-all', '-l', action="store_true",
                        help="list pending reviews")
        args.add_option('--review', '-r', action="store_true",
                        help="display review")
        args.add_option('--set-2', '-2', action="store_true",
                        help="score a patchset -2 on code review")
        args.add_option('--set-1', '-1', action="store_true",
                        help="score a patchset -1 on a code review")
        args.add_option('--set-0', '-0', action="store_true",
                        help="score a patchset 0 on a code review")
        args.add_option('--set-plus-1', '-p', action="store_true",
                        help="score a patchset +1 on a code review")
        args.add_option('--set-plus-2', '-P', action="store_true",
                        help="score a patchset +2 on a code review")
        args.add_option('--verified', metavar="-1|0|+2",
                        help="Set a verified score.")
        args.add_option('--approve', '-a', action="store_true",
                        help="Approve a patch set")
        args.add_option('--message', '-m', metavar='"Message"',
                        help="post message")
        args.add_option('--abandon', action="store_true",
                        help="Abandon a patch set")
        args.add_option('--delete', action="store_true",
                        help="Delete a draft patch")
        args.add_option('--publish', action="store_true",
                        help="Publish a draft patch")
        args.add_option('--restore', action="store_true",
                        help="Restore an abandoned patch set")
        args.add_option('--submit', action="store_true",
                        help="Submit a patch set")
        args.add_option('--recheck', action="store_true",
                        help="post recheck message ala openstack gerrit")
        args.add_option('--reverify', action="store_true",
                        help="post reverify message ala openstack gerrit")
        args.add_option('--host', default=None,help="Gerrit hostname or ip")
        args.add_option('--port', default=None, help="Gerrit port")
        args.add_option('--user', default=None, help="Gerrit user")
        args.add_option('--project', default=None, help="Gerrit project")
        options, arguments = args.parse_args()

        gerrit_user = None
        gerrit_host = None
        gerrit_port = None
        gerrit_project = None

        #obtain list of set options
        setopts = dict((k, v) for k, v in vars(options).iteritems() if v is not None)
        if len(setopts) == 0:
            args.print_help()
            sys.exit(0)
        #filter out options that aren't mutually exclusive
        ignored = ['host', 'port', 'user', 'project']
        for k in ignored:
            if k in setopts:
                del setopts[k]
        #error if theres any mutually exclusive options set
        if len(setopts) > 1:
            args.error("Options %s are mutually exclusive" % setopts.keys())

        gurl = self.get_gerrit_url()
        if gurl:
            if gurl.netloc.count('@'):
                gerrit_user = gurl.netloc.split('@')[0]
                if gurl.netloc.count(':'):
                    gerrit_host = gurl.netloc.split('@')[1].split(':')[0]
                    gerrit_port = gurl.netloc.split('@')[1].split(':')[1]
                else:
                    gerrit_host = gurl.netloc.split('@')[1]
            else:
                gerrit_host = gurl.netloc.split(':')[0]
                gerrit_port = gurl.netloc.split(':')[1]
            gerrit_project = gurl.path.strip('/')

        if options.user:
            gerrit_user = options.user
        if options.host:
            gerrit_host = options.host
        if options.port:
            gerrit_port = options.port
        if options.project:
            gerrit_project = options.project

        if not gerrit_user:
            args.error("Couldn't find gerrit user in git config, env, or in args")
        if not gerrit_host:
            args.error("Couldn't find gerrit host in git config, env, or in args")
        if not gerrit_port:
            args.error("Couldn't find gerrit port in git config, env, or in args")
        if not gerrit_project:
            args.error("Couldn't find gerrit project in git config, env, or in args")

        fgerrit = FGerrit(ssh_user=gerrit_user, ssh_host=gerrit_host,
                                 project=gerrit_project,
                                 ssh_port=int(gerrit_port),
                                 status="open")
        if options.list_all:
            fgerrit.print_reviews_list(fgerrit.list_reviews())
            sys.exit(0)

        if not arguments:
            args.error('You failed to specify a patchset sha1, or short sha1')
        if len(arguments) > 1:
            args.error('You specified more than one patchset')

        target = arguments[0]

        if options.review:
            print fgerrit.get_review('%s' % target, comments=True, text=True)
        elif options.set_2:
            print fgerrit.code_review(target, "-2")
        elif options.set_1:
            print fgerrit.code_review(target, "-1")
        elif options.set_0:
            print fgerrit.code_review(target, "-0")
        elif options.set_plus_1:
            print fgerrit.code_review(target, "+1")
        elif options.set_plus_2:
            print fgerrit.code_review(target, "+2")
        elif options.approve:
            print fgerrit.approve_review(target, "+1")
        elif options.message:
            print fgerrit.post_message(target, options.message)
        elif options.abandon:
            print fgerrit.abandon_change(target)
        elif options.delete:
            print fgerrit.delete_change(target)
        elif options.publish:
            print fgerrit.publish_draft(target)
        elif options.restore:
            print fgerrit.restore_change(target)
        elif options.submit:
            print fgerrit.submit_change(target)
        elif options.recheck:
            print fgerrit.post_message(target, "recheck no bug")
        elif options.reverify:
            print fgerrit.post_message(target, "reverify no bug")
        elif options.verified:
            valid_scores = ['-1', '0', '+1']
            if options.verified in valid_scores:
                print fgerrit.verify_change(target, options.verified)
            else:
                args.error('Valid verify scores are: -1 , 0, or +1')
        else:
            args.print_help()

if __name__ == '__main__':
    cmd = GerritCMD()
    cmd.main()
